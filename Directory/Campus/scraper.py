# Written by Luca Ara√∫jo, '26
# Fall, 2022

# This code takes directly the output generated by the WHMCS_Webscraper code and assigns roles based on the output of
# the campus directory query, queries by email, if there are multiple results matches with the first one, double check
# if that is the desired one later

# Since the directory was quite tricky to navigate and it had sometimes super fast or super slow response times
# this code requires manual input to work. In the beginning the user needs to login to the alumni directory
# and then press enter every time, first to send in the first query after login and then to scrape the current one
# and send in the next query, it can only be pressed when the directory comes back with a response to the query

# Only writes everything at the end, so if you kill the code in the middle it won't generate a csv file

import csv
from bs4 import BeautifulSoup
import time

from selenium import webdriver
from selenium.webdriver.common.by import By

from selenium.webdriver.firefox.service import Service

# input
csv_input = 'data.csv'

csv_output = 'data_processed.csv'
csv_students = 'students.csv'
csv_faculty = 'faculty.csv'
csv_staff = 'staff.csv'
csv_non_carleton = 'non_carleton.csv'

non_carleton = [] # email accounts that do not end in @carleton.edu
students = []
faculty = []
staff = []
everyone = []

def scrape(driver, row):
    try:
        content = driver.find_element(By.CLASS_NAME, 'campus-directory__name-block')

        # student
        if len(content.find_elements(By.CLASS_NAME, 'campus-directory__cohort-year')) == 1:
            row[3] = 'Student - ' + \
                content.find_element(By.CLASS_NAME, 'campus-directory__cohort-year').text
            students.append(row)
        else:
            # faculty & staff
            role = content.find_element(By.CLASS_NAME, 'campus-directory__affiliations').text
            row[3] = role
            if role == 'Faculty':
                faculty.append(row)
            else:
                staff.append(row)
    except:
        non_carleton.append(row) # the person was not found in the directory
    finally:
        everyone.append(row) # add the person with its updated role

def write_array(csv_filename, array_out):
    with open(csv_filename, 'w') as csvfile:
        for row in array_out:
            csvfile.write(','.join(row) + '\n')

def launch_browser():
    s=Service('./geckodriver')
    driver = webdriver.Firefox(service=s)
    return driver

def main():
    driver = launch_browser()
    driver.get('https://www.carleton.edu/directory/')

    print("Login to the campus directory and then press enter")
    a = input() # just wait for the user to login to then continue
    
    # print(driver.page_source)

    with open(csv_input, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        for row in reader:
            if row[2].split('@')[1] != 'carleton.edu':
                non_carleton.append(row)
            else:
                email = row[2].split('@')[0]
                driver.find_element(By.ID, 'email').send_keys(email)
                
                driver.find_element(By.ID, 'campus-directory__submit').click()

                a = input()
                scrape(driver, row)
                
                driver.find_element(By.ID, 'email').clear()

    print(everyone)
    print(students)
    print(faculty)
    print(staff)
    print(non_carleton)

    write_array(csv_output, everyone)
    write_array(csv_students, students)
    write_array(csv_faculty, faculty)
    write_array(csv_staff, staff)
    write_array(csv_non_carleton, non_carleton)

    driver.close()
    driver.quit()

if __name__ == '__main__':
    main()
